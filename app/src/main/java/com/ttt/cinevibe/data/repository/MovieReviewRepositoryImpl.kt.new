package com.ttt.cinevibe.data.repository

import com.ttt.cinevibe.data.remote.api.MovieReviewApiService
import com.ttt.cinevibe.data.remote.dto.CreateReviewRequest
import com.ttt.cinevibe.data.remote.dto.UpdateReviewRequest
import com.ttt.cinevibe.domain.model.MovieReview
import com.ttt.cinevibe.domain.model.Resource
import com.ttt.cinevibe.domain.repository.MovieReviewRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import retrofit2.HttpException
import java.io.IOException
import javax.inject.Inject

class MovieReviewRepositoryImpl @Inject constructor(
    private val movieReviewApiService: MovieReviewApiService
) : MovieReviewRepository {

    override suspend fun getUserReviews(page: Int, size: Int): Flow<Resource<List<MovieReview>>> = flow {
        emit(Resource.Loading())
        try {
            val response = movieReviewApiService.getUserReviews(page, size)
            val reviews = response.content.map { it.toMovieReview() }
            emit(Resource.Success(reviews))
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun getMovieReviews(tmdbMovieId: Long, page: Int, size: Int): Flow<Resource<List<MovieReview>>> = flow {
        emit(Resource.Loading())
        try {
            android.util.Log.d("MovieReviewRepo", "Fetching movie reviews for movieId: $tmdbMovieId, page: $page")
            val response = movieReviewApiService.getMovieReviews(tmdbMovieId, page, size)
            android.util.Log.d("MovieReviewRepo", "Got response with ${response.content.size} reviews")
            
            if (response.content.isNotEmpty()) {
                val sampleReview = response.content[0]
                android.util.Log.d("MovieReviewRepo", "Sample review - id: ${sampleReview.id}")
            }
            
            val reviews = response.content.map { it.toMovieReview() }
            emit(Resource.Success(reviews))
        } catch (e: HttpException) {
            android.util.Log.e("MovieReviewRepo", "HTTP error: ${e.message}", e)
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            android.util.Log.e("MovieReviewRepo", "IO error: ${e.message}", e)
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            android.util.Log.e("MovieReviewRepo", "Unexpected error: ${e.message}", e)
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun getReviewById(reviewId: Long): Flow<Resource<MovieReview>> = flow {
        emit(Resource.Loading())
        try {
            val response = movieReviewApiService.getReviewById(reviewId)
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data.toMovieReview()))
            } else {
                emit(Resource.Error(response.message ?: "Failed to get review"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun createReview(tmdbMovieId: Long, rating: Int, content: String): Flow<Resource<MovieReview>> = flow {
        emit(Resource.Loading())
        try {
            val request = CreateReviewRequest(tmdbMovieId, rating, content)
            val response = movieReviewApiService.createReview(request)
            
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data.toMovieReview()))
            } else {
                emit(Resource.Error(response.message ?: "Failed to create review"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun updateReview(reviewId: Long, rating: Int, content: String): Flow<Resource<MovieReview>> = flow {
        emit(Resource.Loading())
        try {
            val request = UpdateReviewRequest(rating, content)
            val response = movieReviewApiService.updateReview(reviewId, request)
            
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data.toMovieReview()))
            } else {
                emit(Resource.Error(response.message ?: "Failed to update review"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun deleteReview(reviewId: Long): Flow<Resource<Unit>> = flow {
        emit(Resource.Loading())
        try {
            movieReviewApiService.deleteReview(reviewId)
            emit(Resource.Success(Unit))
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun likeReview(reviewId: Long): Flow<Resource<MovieReview>> = flow {
        emit(Resource.Loading())
        try {
            val response = movieReviewApiService.likeReview(reviewId)
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data.toMovieReview()))
            } else {
                emit(Resource.Error(response.message ?: "Failed to like review"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun unlikeReview(reviewId: Long): Flow<Resource<MovieReview>> = flow {
        emit(Resource.Loading())
        try {
            val response = movieReviewApiService.unlikeReview(reviewId)
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data.toMovieReview()))
            } else {
                emit(Resource.Error(response.message ?: "Failed to unlike review"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun hasUserReviewedMovie(tmdbMovieId: Long): Flow<Resource<Boolean>> = flow {
        emit(Resource.Loading())
        try {
            val response = movieReviewApiService.hasUserReviewedMovie(tmdbMovieId)
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data))
            } else {
                emit(Resource.Error(response.message ?: "Failed to check review status"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }

    override suspend fun getUserReviewForMovie(tmdbMovieId: Long): Flow<Resource<MovieReview>> = flow {
        emit(Resource.Loading())
        try {
            val response = movieReviewApiService.getUserReviewForMovie(tmdbMovieId)
            if (response.success && response.data != null) {
                emit(Resource.Success(response.data.toMovieReview()))
            } else {
                emit(Resource.Error(response.message ?: "Failed to get user review for movie"))
            }
        } catch (e: HttpException) {
            emit(Resource.Error(e.message ?: "HTTP error occurred"))
        } catch (e: IOException) {
            emit(Resource.Error("Network error. Please check your connection."))
        } catch (e: Exception) {
            emit(Resource.Error("An unexpected error occurred: ${e.message}"))
        }
    }
}
